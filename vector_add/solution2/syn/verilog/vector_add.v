// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vector_add_vector_add,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.077000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=55,HLS_SYN_LUT=150,HLS_VERSION=2022_2}" *)

module vector_add (
        ap_clk,
        ap_rst_n,
        x_TDATA,
        x_TVALID,
        x_TREADY,
        w_TDATA,
        w_TVALID,
        w_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] x_TDATA;
input   x_TVALID;
output   x_TREADY;
input  [7:0] w_TDATA;
input   w_TVALID;
output   w_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
reg   [7:0] y_1_data_reg;
reg    y_1_vld_reg;
reg    y_1_vld_in;
reg    y_1_ack_in;
reg    x_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_nbreadreq_fu_44_p3;
wire   [0:0] tmp_1_nbreadreq_fu_52_p3;
reg    w_TDATA_blk_n;
wire   [7:0] mul_ln813_fu_95_p2;
reg   [7:0] ap_phi_mux_acc_V_loc_0_phi_fu_83_p6;
reg    ap_predicate_op16_read_state1;
reg    ap_predicate_op17_read_state1;
reg    ap_block_state1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_CS_fsm_state2;
wire    regslice_both_x_U_apdone_blk;
wire  signed [7:0] x_TDATA_int_regslice;
wire    x_TVALID_int_regslice;
reg    x_TREADY_int_regslice;
wire    regslice_both_x_U_ack_in;
wire    regslice_both_w_U_apdone_blk;
wire  signed [7:0] w_TDATA_int_regslice;
wire    w_TVALID_int_regslice;
reg    w_TREADY_int_regslice;
wire    regslice_both_w_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 y_1_data_reg = 8'd0;
#0 y_1_vld_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

vector_add_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .y(y_1_data_reg),
    .y_ap_vld(y_1_vld_reg)
);

vector_add_mul_8s_8s_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
mul_8s_8s_8_1_1_U1(
    .din0(w_TDATA_int_regslice),
    .din1(x_TDATA_int_regslice),
    .dout(mul_ln813_fu_95_p2)
);

vector_add_regslice_both #(
    .DataWidth( 8 ))
regslice_both_x_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(x_TDATA),
    .vld_in(x_TVALID),
    .ack_in(regslice_both_x_U_ack_in),
    .data_out(x_TDATA_int_regslice),
    .vld_out(x_TVALID_int_regslice),
    .ack_out(x_TREADY_int_regslice),
    .apdone_blk(regslice_both_x_U_apdone_blk)
);

vector_add_regslice_both #(
    .DataWidth( 8 ))
regslice_both_w_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(w_TDATA),
    .vld_in(w_TVALID),
    .ack_in(regslice_both_w_U_ack_in),
    .data_out(w_TDATA_int_regslice),
    .vld_out(w_TVALID_int_regslice),
    .ack_out(w_TREADY_int_regslice),
    .apdone_blk(regslice_both_w_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((y_1_vld_in == 1'b1) & (y_1_vld_reg == 1'b0))) begin
        y_1_vld_reg <= 1'b1;
    end else if (((1'b1 == 1'b1) & (y_1_vld_in == 1'b0) & (y_1_vld_reg == 1'b1))) begin
        y_1_vld_reg <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (y_1_vld_in == 1'b1) & (y_1_vld_reg == 1'b1)) | ((y_1_vld_in == 1'b1) & (y_1_vld_reg == 1'b0)))) begin
        y_1_data_reg <= ap_phi_mux_acc_V_loc_0_phi_fu_83_p6;
    end
end

always @ (*) begin
    if ((((ap_predicate_op16_read_state1 == 1'b1) & (x_TVALID_int_regslice == 1'b0)) | ((w_TVALID_int_regslice == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((y_1_ack_in == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_nbreadreq_fu_44_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_1_nbreadreq_fu_52_p3 == 1'd0) & (tmp_nbreadreq_fu_44_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_acc_V_loc_0_phi_fu_83_p6 = 8'd0;
    end else if (((tmp_1_nbreadreq_fu_52_p3 == 1'd1) & (tmp_nbreadreq_fu_44_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_acc_V_loc_0_phi_fu_83_p6 = mul_ln813_fu_95_p2;
    end else begin
        ap_phi_mux_acc_V_loc_0_phi_fu_83_p6 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_1_nbreadreq_fu_52_p3 == 1'd1) & (tmp_nbreadreq_fu_44_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_TDATA_blk_n = w_TVALID_int_regslice;
    end else begin
        w_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((ap_predicate_op16_read_state1 == 1'b1) & (x_TVALID_int_regslice == 1'b0)) | ((w_TVALID_int_regslice == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op17_read_state1 == 1'b1))) begin
        w_TREADY_int_regslice = 1'b1;
    end else begin
        w_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_nbreadreq_fu_52_p3 == 1'd1) & (tmp_nbreadreq_fu_44_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_TDATA_blk_n = x_TVALID_int_regslice;
    end else begin
        x_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((ap_predicate_op16_read_state1 == 1'b1) & (x_TVALID_int_regslice == 1'b0)) | ((w_TVALID_int_regslice == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1))) & (ap_predicate_op16_read_state1 == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_TREADY_int_regslice = 1'b1;
    end else begin
        x_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((y_1_vld_reg == 1'b0) | ((1'b1 == 1'b1) & (y_1_vld_reg == 1'b1)))) begin
        y_1_ack_in = 1'b1;
    end else begin
        y_1_ack_in = 1'b0;
    end
end

always @ (*) begin
    if ((~(((ap_predicate_op16_read_state1 == 1'b1) & (x_TVALID_int_regslice == 1'b0)) | ((w_TVALID_int_regslice == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
        y_1_vld_in = 1'b1;
    end else begin
        y_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~(((ap_predicate_op16_read_state1 == 1'b1) & (x_TVALID_int_regslice == 1'b0)) | ((w_TVALID_int_regslice == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((y_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = (((ap_predicate_op16_read_state1 == 1'b1) & (x_TVALID_int_regslice == 1'b0)) | ((w_TVALID_int_regslice == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_predicate_op16_read_state1 = ((tmp_1_nbreadreq_fu_52_p3 == 1'd1) & (tmp_nbreadreq_fu_44_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op17_read_state1 = ((tmp_1_nbreadreq_fu_52_p3 == 1'd1) & (tmp_nbreadreq_fu_44_p3 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign tmp_1_nbreadreq_fu_52_p3 = w_TVALID_int_regslice;

assign tmp_nbreadreq_fu_44_p3 = x_TVALID_int_regslice;

assign w_TREADY = regslice_both_w_U_ack_in;

assign x_TREADY = regslice_both_x_U_ack_in;

endmodule //vector_add
