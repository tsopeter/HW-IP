-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vector_add is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    x_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    x_TVALID : IN STD_LOGIC;
    x_TREADY : OUT STD_LOGIC;
    w_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    w_TVALID : IN STD_LOGIC;
    w_TREADY : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of vector_add is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vector_add_vector_add,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.077000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=55,HLS_SYN_LUT=150,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal y_1_data_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal y_1_vld_reg : STD_LOGIC := '0';
    signal y_1_vld_in : STD_LOGIC;
    signal y_1_ack_in : STD_LOGIC;
    signal x_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_nbreadreq_fu_44_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_nbreadreq_fu_52_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_TDATA_blk_n : STD_LOGIC;
    signal mul_ln813_fu_95_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_acc_V_loc_0_phi_fu_83_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op16_read_state1 : BOOLEAN;
    signal ap_predicate_op17_read_state1 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_x_U_apdone_blk : STD_LOGIC;
    signal x_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal x_TVALID_int_regslice : STD_LOGIC;
    signal x_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_x_U_ack_in : STD_LOGIC;
    signal regslice_both_w_U_apdone_blk : STD_LOGIC;
    signal w_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal w_TVALID_int_regslice : STD_LOGIC;
    signal w_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_w_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component vector_add_mul_8s_8s_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vector_add_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        y : IN STD_LOGIC_VECTOR (7 downto 0);
        y_ap_vld : IN STD_LOGIC );
    end component;


    component vector_add_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component vector_add_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        y => y_1_data_reg,
        y_ap_vld => y_1_vld_reg);

    mul_8s_8s_8_1_1_U1 : component vector_add_mul_8s_8s_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => w_TDATA_int_regslice,
        din1 => x_TDATA_int_regslice,
        dout => mul_ln813_fu_95_p2);

    regslice_both_x_U : component vector_add_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => x_TDATA,
        vld_in => x_TVALID,
        ack_in => regslice_both_x_U_ack_in,
        data_out => x_TDATA_int_regslice,
        vld_out => x_TVALID_int_regslice,
        ack_out => x_TREADY_int_regslice,
        apdone_blk => regslice_both_x_U_apdone_blk);

    regslice_both_w_U : component vector_add_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => w_TDATA,
        vld_in => w_TVALID,
        ack_in => regslice_both_w_U_ack_in,
        data_out => w_TDATA_int_regslice,
        vld_out => w_TVALID_int_regslice,
        ack_out => w_TREADY_int_regslice,
        apdone_blk => regslice_both_w_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    y_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((y_1_vld_in = ap_const_logic_1) and (y_1_vld_reg = ap_const_logic_0))) then 
                y_1_vld_reg <= ap_const_logic_1;
            elsif (((ap_const_logic_1 = ap_const_logic_1) and (y_1_vld_in = ap_const_logic_0) and (y_1_vld_reg = ap_const_logic_1))) then 
                y_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (y_1_vld_in = ap_const_logic_1) and (y_1_vld_reg = ap_const_logic_1)) or ((y_1_vld_in = ap_const_logic_1) and (y_1_vld_reg = ap_const_logic_0)))) then
                y_1_data_reg <= ap_phi_mux_acc_V_loc_0_phi_fu_83_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (y_1_ack_in, ap_CS_fsm, ap_CS_fsm_state1, ap_predicate_op16_read_state1, ap_predicate_op17_read_state1, ap_CS_fsm_state2, x_TVALID_int_regslice, w_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((((ap_predicate_op16_read_state1 = ap_const_boolean_1) and (x_TVALID_int_regslice = ap_const_logic_0)) or ((w_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((y_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_predicate_op16_read_state1, ap_predicate_op17_read_state1, x_TVALID_int_regslice, w_TVALID_int_regslice)
    begin
        if ((((ap_predicate_op16_read_state1 = ap_const_boolean_1) and (x_TVALID_int_regslice = ap_const_logic_0)) or ((w_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(y_1_ack_in)
    begin
        if ((y_1_ack_in = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_predicate_op16_read_state1, ap_predicate_op17_read_state1, x_TVALID_int_regslice, w_TVALID_int_regslice)
    begin
                ap_block_state1 <= (((ap_predicate_op16_read_state1 = ap_const_boolean_1) and (x_TVALID_int_regslice = ap_const_logic_0)) or ((w_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)));
    end process;


    ap_phi_mux_acc_V_loc_0_phi_fu_83_p6_assign_proc : process(ap_CS_fsm_state1, tmp_nbreadreq_fu_44_p3, tmp_1_nbreadreq_fu_52_p3, mul_ln813_fu_95_p2)
    begin
        if ((((tmp_nbreadreq_fu_44_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_1_nbreadreq_fu_52_p3 = ap_const_lv1_0) and (tmp_nbreadreq_fu_44_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_acc_V_loc_0_phi_fu_83_p6 <= ap_const_lv8_0;
        elsif (((tmp_1_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_44_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_acc_V_loc_0_phi_fu_83_p6 <= mul_ln813_fu_95_p2;
        else 
            ap_phi_mux_acc_V_loc_0_phi_fu_83_p6 <= "XXXXXXXX";
        end if; 
    end process;


    ap_predicate_op16_read_state1_assign_proc : process(tmp_nbreadreq_fu_44_p3, tmp_1_nbreadreq_fu_52_p3)
    begin
                ap_predicate_op16_read_state1 <= ((tmp_1_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_44_p3 = ap_const_lv1_1));
    end process;


    ap_predicate_op17_read_state1_assign_proc : process(tmp_nbreadreq_fu_44_p3, tmp_1_nbreadreq_fu_52_p3)
    begin
                ap_predicate_op17_read_state1 <= ((tmp_1_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_44_p3 = ap_const_lv1_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    tmp_1_nbreadreq_fu_52_p3 <= (0=>(w_TVALID_int_regslice), others=>'-');
    tmp_nbreadreq_fu_44_p3 <= (0=>(x_TVALID_int_regslice), others=>'-');

    w_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, tmp_nbreadreq_fu_44_p3, tmp_1_nbreadreq_fu_52_p3, w_TVALID_int_regslice)
    begin
        if (((tmp_1_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_44_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_TDATA_blk_n <= w_TVALID_int_regslice;
        else 
            w_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    w_TREADY <= regslice_both_w_U_ack_in;

    w_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_predicate_op16_read_state1, ap_predicate_op17_read_state1, x_TVALID_int_regslice, w_TVALID_int_regslice)
    begin
        if ((not((((ap_predicate_op16_read_state1 = ap_const_boolean_1) and (x_TVALID_int_regslice = ap_const_logic_0)) or ((w_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_predicate_op17_read_state1 = ap_const_boolean_1))) then 
            w_TREADY_int_regslice <= ap_const_logic_1;
        else 
            w_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    x_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, tmp_nbreadreq_fu_44_p3, tmp_1_nbreadreq_fu_52_p3, x_TVALID_int_regslice)
    begin
        if (((tmp_1_nbreadreq_fu_52_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_44_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_TDATA_blk_n <= x_TVALID_int_regslice;
        else 
            x_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    x_TREADY <= regslice_both_x_U_ack_in;

    x_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_predicate_op16_read_state1, ap_predicate_op17_read_state1, x_TVALID_int_regslice, w_TVALID_int_regslice)
    begin
        if ((not((((ap_predicate_op16_read_state1 = ap_const_boolean_1) and (x_TVALID_int_regslice = ap_const_logic_0)) or ((w_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)))) and (ap_predicate_op16_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            x_TREADY_int_regslice <= ap_const_logic_1;
        else 
            x_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    y_1_ack_in_assign_proc : process(y_1_vld_reg)
    begin
        if (((y_1_vld_reg = ap_const_logic_0) or ((ap_const_logic_1 = ap_const_logic_1) and (y_1_vld_reg = ap_const_logic_1)))) then 
            y_1_ack_in <= ap_const_logic_1;
        else 
            y_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    y_1_vld_in_assign_proc : process(ap_CS_fsm_state1, ap_predicate_op16_read_state1, ap_predicate_op17_read_state1, x_TVALID_int_regslice, w_TVALID_int_regslice)
    begin
        if ((not((((ap_predicate_op16_read_state1 = ap_const_boolean_1) and (x_TVALID_int_regslice = ap_const_logic_0)) or ((w_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            y_1_vld_in <= ap_const_logic_1;
        else 
            y_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

end behav;
