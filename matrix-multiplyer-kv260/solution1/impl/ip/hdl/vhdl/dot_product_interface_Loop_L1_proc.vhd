-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dot_product_interface_Loop_L1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m : IN STD_LOGIC_VECTOR (31 downto 0);
    h : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of dot_product_interface_Loop_L1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h_cast_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_cast_reg_355 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_146_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_reg_360 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln14_fu_206_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln14_reg_368 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln14_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln22_mid2_fu_235_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln22_mid2_reg_373 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln16_fu_244_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln16_reg_378 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln22_fu_249_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln22_reg_383 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_reg_388 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_start : STD_LOGIC;
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_done : STD_LOGIC;
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_idle : STD_LOGIC;
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_ready : STD_LOGIC;
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_A_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_A_ce0 : STD_LOGIC;
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_B_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_B_ce0 : STD_LOGIC;
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_acc_V_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_acc_V_out_ap_vld : STD_LOGIC;
    signal grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln22_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_fu_66 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_fu_269_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal indvars_iv_fu_70 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln16_fu_275_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_74 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln14_2_fu_223_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_fu_78 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln14_fu_180_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal cast_cast_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_146_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln16_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_195_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln14_fu_231_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln14_1_fu_215_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_fu_253_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_305_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal bound_fu_146_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_fu_146_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dot_product_interface_Loop_L1_proc_Pipeline_SUM IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_cast : IN STD_LOGIC_VECTOR (31 downto 0);
        shl_ln22_mid2 : IN STD_LOGIC_VECTOR (19 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (19 downto 0);
        select_ln14 : IN STD_LOGIC_VECTOR (9 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        acc_V_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        acc_V_out_ap_vld : OUT STD_LOGIC );
    end component;


    component dot_product_interface_mul_64ns_64ns_128_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    grp_Loop_L1_proc_Pipeline_SUM_fu_117 : component dot_product_interface_Loop_L1_proc_Pipeline_SUM
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_start,
        ap_done => grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_done,
        ap_idle => grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_idle,
        ap_ready => grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_ready,
        n_cast => n,
        shl_ln22_mid2 => shl_ln22_mid2_reg_373,
        A_address0 => grp_Loop_L1_proc_Pipeline_SUM_fu_117_A_address0,
        A_ce0 => grp_Loop_L1_proc_Pipeline_SUM_fu_117_A_ce0,
        A_q0 => A_q0,
        trunc_ln => trunc_ln16_reg_378,
        select_ln14 => select_ln14_reg_368,
        B_address0 => grp_Loop_L1_proc_Pipeline_SUM_fu_117_B_address0,
        B_ce0 => grp_Loop_L1_proc_Pipeline_SUM_fu_117_B_ce0,
        B_q0 => B_q0,
        acc_V_out => grp_Loop_L1_proc_Pipeline_SUM_fu_117_acc_V_out,
        acc_V_out_ap_vld => grp_Loop_L1_proc_Pipeline_SUM_fu_117_acc_V_out_ap_vld);

    mul_64ns_64ns_128_1_1_U10 : component dot_product_interface_mul_64ns_64ns_128_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        din0 => bound_fu_146_p0,
        din1 => bound_fu_146_p1,
        dout => bound_fu_146_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln14_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln14_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_ready = ap_const_logic_1)) then 
                    grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_74 <= ap_const_lv64_0;
            elsif (((icmp_ln14_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_74 <= select_ln14_2_fu_223_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_78 <= ap_const_lv128_lc_1;
            elsif (((icmp_ln14_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_fu_78 <= add_ln14_fu_180_p2;
            end if; 
        end if;
    end process;

    indvars_iv_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv_fu_70 <= ap_const_lv10_0;
            elsif (((icmp_ln14_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv_fu_70 <= add_ln16_fu_275_p2;
            end if; 
        end if;
    end process;

    j_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_66 <= ap_const_lv64_0;
            elsif (((icmp_ln14_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_fu_66 <= j_1_fu_269_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                bound_reg_360 <= bound_fu_146_p2;
                h_cast_reg_355 <= h_cast_fu_130_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                lshr_ln_reg_388 <= add_ln22_fu_253_p2(19 downto 10);
                select_ln14_reg_368 <= select_ln14_fu_206_p3;
                    shl_ln22_mid2_reg_373(19 downto 10) <= shl_ln22_mid2_fu_235_p3(19 downto 10);
                trunc_ln16_reg_378 <= trunc_ln16_fu_244_p1;
                trunc_ln22_reg_383 <= trunc_ln22_fu_249_p1;
            end if;
        end if;
    end process;
    shl_ln22_mid2_reg_373(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln14_fu_175_p2, grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln14_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    A_address0 <= grp_Loop_L1_proc_Pipeline_SUM_fu_117_A_address0;
    A_ce0 <= grp_Loop_L1_proc_Pipeline_SUM_fu_117_A_ce0;
    B_address0 <= grp_Loop_L1_proc_Pipeline_SUM_fu_117_B_address0;
    B_ce0 <= grp_Loop_L1_proc_Pipeline_SUM_fu_117_B_ce0;
    C_address0 <= zext_ln22_fu_311_p1(20 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= grp_Loop_L1_proc_Pipeline_SUM_fu_117_acc_V_out;

    C_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln14_fu_180_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_78) + unsigned(ap_const_lv128_lc_2));
    add_ln16_fu_275_p2 <= std_logic_vector(unsigned(select_ln14_fu_206_p3) + unsigned(ap_const_lv10_1));
    add_ln22_fu_253_p2 <= std_logic_vector(unsigned(trunc_ln16_fu_244_p1) + unsigned(shl_ln22_mid2_fu_235_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_done)
    begin
        if ((grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln14_fu_175_p2)
    begin
        if (((icmp_ln14_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln14_fu_175_p2)
    begin
        if (((icmp_ln14_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_146_p0 <= bound_fu_146_p00(64 - 1 downto 0);
    bound_fu_146_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast_cast_fu_134_p1),128));
    bound_fu_146_p1 <= bound_fu_146_p10(64 - 1 downto 0);
    bound_fu_146_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_cast_fu_130_p1),128));
        cast_cast_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m),64));

    grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_start <= grp_Loop_L1_proc_Pipeline_SUM_fu_117_ap_start_reg;
        h_cast_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h),64));

    i_2_fu_195_p2 <= std_logic_vector(unsigned(i_fu_74) + unsigned(ap_const_lv64_1));
    icmp_ln14_fu_175_p2 <= "1" when (indvar_flatten_fu_78 = bound_reg_360) else "0";
    icmp_ln16_fu_201_p2 <= "1" when (j_fu_66 = h_cast_reg_355) else "0";
    j_1_fu_269_p2 <= std_logic_vector(unsigned(select_ln14_1_fu_215_p3) + unsigned(ap_const_lv64_1));
    select_ln14_1_fu_215_p3 <= 
        ap_const_lv64_0 when (icmp_ln16_fu_201_p2(0) = '1') else 
        j_fu_66;
    select_ln14_2_fu_223_p3 <= 
        i_2_fu_195_p2 when (icmp_ln16_fu_201_p2(0) = '1') else 
        i_fu_74;
    select_ln14_fu_206_p3 <= 
        ap_const_lv10_0 when (icmp_ln16_fu_201_p2(0) = '1') else 
        indvars_iv_fu_70;
    shl_ln22_mid2_fu_235_p3 <= (trunc_ln14_fu_231_p1 & ap_const_lv10_0);
    tmp_1_fu_305_p3 <= (lshr_ln_reg_388 & trunc_ln22_reg_383);
    trunc_ln14_fu_231_p1 <= select_ln14_2_fu_223_p3(10 - 1 downto 0);
    trunc_ln16_fu_244_p1 <= select_ln14_1_fu_215_p3(20 - 1 downto 0);
    trunc_ln22_fu_249_p1 <= select_ln14_1_fu_215_p3(10 - 1 downto 0);
    zext_ln22_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_305_p3),64));
end behav;
