-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dot_product_interface is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 22;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of dot_product_interface is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dot_product_interface_dot_product_interface,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.530000,HLS_SYN_LAT=136314881,HLS_SYN_TPT=136314882,HLS_SYN_MEM=1536,HLS_SYN_DSP=0,HLS_SYN_FF=1119,HLS_SYN_LUT=1341,HLS_VERSION=2022_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal n : STD_LOGIC_VECTOR (31 downto 0);
    signal m : STD_LOGIC_VECTOR (31 downto 0);
    signal h : STD_LOGIC_VECTOR (31 downto 0);
    signal A_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_L1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_L1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_L1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_L1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_L1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_L1_proc_U0_C_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal Loop_L1_proc_U0_C_ce0 : STD_LOGIC;
    signal Loop_L1_proc_U0_C_we0 : STD_LOGIC;
    signal Loop_L1_proc_U0_C_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_L1_proc_U0_A_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal Loop_L1_proc_U0_A_ce0 : STD_LOGIC;
    signal Loop_L1_proc_U0_B_address0 : STD_LOGIC_VECTOR (19 downto 0);
    signal Loop_L1_proc_U0_B_ce0 : STD_LOGIC;

    component dot_product_interface_Loop_L1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m : IN STD_LOGIC_VECTOR (31 downto 0);
        h : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dot_product_interface_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        n : OUT STD_LOGIC_VECTOR (31 downto 0);
        m : OUT STD_LOGIC_VECTOR (31 downto 0);
        h : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        A_ce0 : IN STD_LOGIC;
        A_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        B_address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        B_ce0 : IN STD_LOGIC;
        B_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        C_address0 : IN STD_LOGIC_VECTOR (19 downto 0);
        C_ce0 : IN STD_LOGIC;
        C_we0 : IN STD_LOGIC;
        C_d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    control_s_axi_U : component dot_product_interface_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        n => n,
        m => m,
        h => h,
        A_address0 => Loop_L1_proc_U0_A_address0,
        A_ce0 => Loop_L1_proc_U0_A_ce0,
        A_q0 => A_q0,
        B_address0 => Loop_L1_proc_U0_B_address0,
        B_ce0 => Loop_L1_proc_U0_B_ce0,
        B_q0 => B_q0,
        C_address0 => Loop_L1_proc_U0_C_address0,
        C_ce0 => Loop_L1_proc_U0_C_ce0,
        C_we0 => Loop_L1_proc_U0_C_we0,
        C_d0 => Loop_L1_proc_U0_C_d0);

    Loop_L1_proc_U0 : component dot_product_interface_Loop_L1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_L1_proc_U0_ap_start,
        ap_done => Loop_L1_proc_U0_ap_done,
        ap_continue => Loop_L1_proc_U0_ap_continue,
        ap_idle => Loop_L1_proc_U0_ap_idle,
        ap_ready => Loop_L1_proc_U0_ap_ready,
        m => m,
        h => h,
        C_address0 => Loop_L1_proc_U0_C_address0,
        C_ce0 => Loop_L1_proc_U0_C_ce0,
        C_we0 => Loop_L1_proc_U0_C_we0,
        C_d0 => Loop_L1_proc_U0_C_d0,
        n => n,
        A_address0 => Loop_L1_proc_U0_A_address0,
        A_ce0 => Loop_L1_proc_U0_A_ce0,
        A_q0 => A_q0,
        B_address0 => Loop_L1_proc_U0_B_address0,
        B_ce0 => Loop_L1_proc_U0_B_ce0,
        B_q0 => B_q0);




    Loop_L1_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_L1_proc_U0_ap_start <= ap_start;
    ap_done <= Loop_L1_proc_U0_ap_done;
    ap_idle <= Loop_L1_proc_U0_ap_idle;
    ap_ready <= Loop_L1_proc_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

end behav;
