// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dot_product_interface_dot_product_interface,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.530000,HLS_SYN_LAT=136314881,HLS_SYN_TPT=136314882,HLS_SYN_MEM=1536,HLS_SYN_DSP=0,HLS_SYN_FF=1119,HLS_SYN_LUT=1341,HLS_VERSION=2022_2}" *)

module dot_product_interface (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 22;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;

 reg    ap_rst_n_inv;
wire   [31:0] n;
wire   [31:0] m;
wire   [31:0] h;
wire   [7:0] A_q0;
wire   [7:0] B_q0;
wire    Loop_L1_proc_U0_ap_start;
wire    Loop_L1_proc_U0_ap_done;
wire    Loop_L1_proc_U0_ap_continue;
wire    Loop_L1_proc_U0_ap_idle;
wire    Loop_L1_proc_U0_ap_ready;
wire   [19:0] Loop_L1_proc_U0_C_address0;
wire    Loop_L1_proc_U0_C_ce0;
wire    Loop_L1_proc_U0_C_we0;
wire   [7:0] Loop_L1_proc_U0_C_d0;
wire   [19:0] Loop_L1_proc_U0_A_address0;
wire    Loop_L1_proc_U0_A_ce0;
wire   [19:0] Loop_L1_proc_U0_B_address0;
wire    Loop_L1_proc_U0_B_ce0;

dot_product_interface_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .n(n),
    .m(m),
    .h(h),
    .A_address0(Loop_L1_proc_U0_A_address0),
    .A_ce0(Loop_L1_proc_U0_A_ce0),
    .A_q0(A_q0),
    .B_address0(Loop_L1_proc_U0_B_address0),
    .B_ce0(Loop_L1_proc_U0_B_ce0),
    .B_q0(B_q0),
    .C_address0(Loop_L1_proc_U0_C_address0),
    .C_ce0(Loop_L1_proc_U0_C_ce0),
    .C_we0(Loop_L1_proc_U0_C_we0),
    .C_d0(Loop_L1_proc_U0_C_d0)
);

dot_product_interface_Loop_L1_proc Loop_L1_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Loop_L1_proc_U0_ap_start),
    .ap_done(Loop_L1_proc_U0_ap_done),
    .ap_continue(Loop_L1_proc_U0_ap_continue),
    .ap_idle(Loop_L1_proc_U0_ap_idle),
    .ap_ready(Loop_L1_proc_U0_ap_ready),
    .m(m),
    .h(h),
    .C_address0(Loop_L1_proc_U0_C_address0),
    .C_ce0(Loop_L1_proc_U0_C_ce0),
    .C_we0(Loop_L1_proc_U0_C_we0),
    .C_d0(Loop_L1_proc_U0_C_d0),
    .n(n),
    .A_address0(Loop_L1_proc_U0_A_address0),
    .A_ce0(Loop_L1_proc_U0_A_ce0),
    .A_q0(A_q0),
    .B_address0(Loop_L1_proc_U0_B_address0),
    .B_ce0(Loop_L1_proc_U0_B_ce0),
    .B_q0(B_q0)
);

assign Loop_L1_proc_U0_ap_continue = 1'b1;

assign Loop_L1_proc_U0_ap_start = ap_start;

assign ap_done = Loop_L1_proc_U0_ap_done;

assign ap_idle = Loop_L1_proc_U0_ap_idle;

assign ap_ready = Loop_L1_proc_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

endmodule //dot_product_interface
